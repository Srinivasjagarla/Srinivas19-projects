priority-based process scheduler with round-robin support:
Priority scheduling is one of the most common scheduling algorithms in batch systems. 
Each process is assigned a priority. The process with the highest priority is to be executed first and so on. 
Processes with the same priority are executed on a first-come first served basis. 
Priority can be decided based on memory requirements, time requirements or any other resource requirement. 
Also priority can be decided on the ratio of average I/O to average CPU burst time.

Implementation: 
1- First input the processes with their burst time 
   and priority.
2- Sort the processes, burst time and priority
   according to the priority.
3- Now simply apply FCFS algorithm.

Advantages:
Priority-based scheduling ensures that high-priority processes are executed first, which can lead to faster completion of critical tasks.
Priority scheduling is useful for real-time systems that require processes to meet strict timing constraints.
Priority scheduling can reduce the average waiting time for processes that require a significant amount of CPU time.

Disadvantages:
Priority inversion: Priority inversion occurs when a low-priority process holds a resource that a high-priority process requires. This can cause delays in the execution of high-priority processes.
Starvation: If the system is heavily loaded with high-priority processes, low-priority processes may never get a chance to execute.
Priority inversion avoidance techniques, such as priority inheritance or priority ceiling protocols, can introduce additional complexity to the system.
Setting priorities can be a difficult task, especially when there are many processes with different priorities.
#code
def findWaitingTime(processes, n, wt): 
	wt[0] = 0
	for i in range(1, n): 
		wt[i] = processes[i - 1][1] + wt[i - 1] 
def findTurnAroundTime(processes, n, wt, tat): 
	for i in range(n): 
		tat[i] = processes[i][1] + wt[i] 
def findavgTime(processes, n): 
	wt = [0] * n 
	tat = [0] * n 
	findWaitingTime(processes, n, wt) 
	findTurnAroundTime(processes, n, wt, tat) 
	print("\nProcesses Burst Time Waiting", 
		"Time Turn-Around Time") 
	total_wt = 0
	total_tat = 0
	for i in range(n): 
		total_wt = total_wt + wt[i] 
		total_tat = total_tat + tat[i] 
		print(" ", processes[i][0], "\t\t", 
			processes[i][1], "\t\t", 
			wt[i], "\t\t", tat[i]) 
	print("\nAverage waiting time = %.5f " % (total_wt / n)) 
	print("Average turn around time = ", total_tat / n) 
def priorityScheduling(proc, n): 
	proc = sorted(proc, key=lambda proc: proc[2], 
				reverse=True) 
	print("Order in which processes gets executed") 
	for i in proc: 
		print(i[0], end=" ") 
	findavgTime(proc, n) 
if __name__ == "__main__": 
	proc = [[1, 10, 1], 
			[2, 5, 0], 
			[3, 8, 1]] 
	n = 3
	priorityScheduling(proc, n) 
#output
order in which processes gets executed
1 3 2
processes brustTime waitingTime Turn-AroundTime
1          10          0           10
3           8          10          18
2           5          18          23
